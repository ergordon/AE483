   1              		.file	"lab.c"
   9              	.Ltext0:
  10              		.global	mass
  11              		.data
  12              		.align	2
  15              	mass:
  16 0000 3D0A373F 		.word	1060571709
  17              		.global	kF
  18              		.align	2
  21              	kF:
  22 0004 E950FA36 		.word	922374377
  23              		.global	kM
  24              		.align	2
  27              	kM:
  28 0008 FC110434 		.word	872681980
  29              		.global	l
  30              		.align	2
  33              	l:
  34 000c 7B142E3E 		.word	1043207291
  35              		.global	MAXPHI2
  36              		.align	2
  39              	MAXPHI2:
  40 0010 7B5E1449 		.word	1226071675
  41              		.global	MINPHI2
  42              		.align	2
  45              	MINPHI2:
  46 0014 757A4646 		.word	1179023989
  47              		.global	K
  48              		.align	2
  51              	K:
  52 0018 9B337C28 		.word	679228315
  53 001c 4100F03F 		.word	1072693313
  54 0020 C3317329 		.word	695415235
  55 0024 00000000 		.word	0
  56 0028 7D1D90A6 		.word	-1500504707
  57 002c BC810440 		.word	1074037180
  58 0030 7D1D1027 		.word	655367549
  59 0034 6DC1643F 		.word	1063567725
  60 0038 50AB5329 		.word	693349200
  61 003c F57E1C3E 		.word	1042054901
  62 0040 00000080 		.word	-2147483648
  63 0044 00000000 		.word	0
  64 0048 21EBECBF 		.word	-1074992351
  65 004c 7D1D10A7 		.word	-1492116099
  66 0050 1B5C8929 		.word	696867867
  67 0054 7D1D1027 		.word	655367549
  68 0058 556A0240 		.word	1073900117
  69 005c 7D1D10A7 		.word	-1492116099
  70 0060 E57B61BF 		.word	-1084130331
  71 0064 7D1D90A6 		.word	-1500504707
  72 0068 FFAE6529 		.word	694529791
  73 006c 00000080 		.word	-2147483648
  74 0070 F008193E 		.word	1041828080
  75 0074 00000000 		.word	0
  76 0078 2D21A2A8 		.word	-1465769683
  77 007c A51B87A8 		.word	-1467540571
  78 0080 C331F328 		.word	687026627
  79 0084 F121D33F 		.word	1070801393
  80 0088 7D1D9027 		.word	663756157
  81 008c DC24B4A7 		.word	-1481366308
  82 0090 9B33FCA7 		.word	-1476643941
  83 0094 7D1D90A7 		.word	-1483727491
  84 0098 7D1D9027 		.word	663756157
  85 009c 00000000 		.word	0
  86 00a0 00000000 		.word	0
  87 00a4 4C1B423E 		.word	1044519756
  88 00a8 8C284629 		.word	692463756
  89 00ac 919C8BA9 		.word	-1450468207
  90 00b0 457144C0 		.word	-1069256379
  91 00b4 00000080 		.word	-2147483648
  92 00b8 0423ABA8 		.word	-1465179388
  93 00bc 3B2C58A7 		.word	-1487393733
  94 00c0 A51B8728 		.word	679943077
  95 00c4 8C2846A8 		.word	-1471797108
  96 00c8 015F06C0 		.word	-1073324287
  97 00cc 00000080 		.word	-2147483648
  98 00d0 00000080 		.word	-2147483648
  99 00d4 00000080 		.word	-2147483648
 100              		.global	g
 101              		.align	2
 104              	g:
 105 00d8 0AE81C41 		.word	1092413450
 106              		.text
 107              		.align	2
 108              		.global	lab
 110              	lab:
 111              	.LFB2:
 112              		.file 1 "lab.c"
   1:lab.c         **** /*
   2:lab.c         ****  * lab.c
   3:lab.c         ****  *
   4:lab.c         ****  *  Created on: Jan 26, 2015
   5:lab.c         ****  *      Author: hanley6
   6:lab.c         ****  */
   7:lab.c         **** 
   8:lab.c         **** /*----------------------------------------------------------------------*/
   9:lab.c         **** /*------------------------------ Preamble ------------------------------*/
  10:lab.c         **** /*----------------------------------------------------------------------*/
  11:lab.c         **** 
  12:lab.c         **** /*--------------- Includes ---------------*/
  13:lab.c         **** #include "lab.h"
  14:lab.c         **** #include "math.h"
  15:lab.c         **** /*------------- End Includes -------------*/
  16:lab.c         **** 
  17:lab.c         **** /*---------- Function Prototypes ---------*/
  18:lab.c         **** void lab3(void);
  19:lab.c         **** void convert_input_to_motor_commands(void);
  20:lab.c         **** void do_sensor_fusion(void);
  21:lab.c         **** /*-------- End Function Prototypes -------*/
  22:lab.c         **** 
  23:lab.c         **** /*--------------- Globals ----------------*/
  24:lab.c         **** struct imuSensor imusensor;
  25:lab.c         **** struct U u;
  26:lab.c         **** struct MOCAP mocap;
  27:lab.c         **** struct GoalPosYaw goalposyaw;
  28:lab.c         **** 
  29:lab.c         **** /////////// HUMMINGBIRD PARAMETERS /////////////
  30:lab.c         **** float mass = 0.715;
  31:lab.c         **** float kF = 7.46e-6;
  32:lab.c         **** float kM = 1.23e-7;
  33:lab.c         **** float l = 0.17;
  34:lab.c         **** float MAXPHI2 = 779.5638*779.5638;
  35:lab.c         **** float MINPHI2 = 112.705875*112.705875;
  36:lab.c         **** ////////////////////////////////////////////
  37:lab.c         **** 
  38:lab.c         **** /////////// CONTROLLER PARAMETERS /////////////
  39:lab.c         **** // The gain matrix has size 4x12 but is represented in C as an array
  40:lab.c         **** // with 48 elements. The first 12 elements are in the first row of the
  41:lab.c         **** // matrix, the second 12 in the second row, and so forth.
  42:lab.c         **** float K[48] = {   0.000000000000014 ,  1.875007700503404 ,  0.000000000000054 ,  0.000000000000000 
  43:lab.c         **** 				 -1.850925589056405 , -0.000000000000002 ,  0.000000000000061 ,  0.000000000000002 ,  2.0377399
  44:lab.c         **** 				 -0.000000000000018 , -0.000000000000015 ,  0.000000000000027 ,  1.649473343767278 ,  0.0000000
  45:lab.c         **** 				  0.000000000000044 , -0.000000000000062 , -3.069413539210437 , -0.000000000000000 , -0.0000000
  46:lab.c         **** ////////////////////////////////////////////
  47:lab.c         **** 
  48:lab.c         **** 
  49:lab.c         **** // Other variables you'll need to work with
  50:lab.c         **** float cnt_u[4];
  51:lab.c         **** float o_desired[3];
  52:lab.c         **** float yaw_desired;
  53:lab.c         **** float g = 9.80665;	// Standard Gravity m/s^2
  54:lab.c         **** float xd[12];   // discrete state (i.e., state error)
  55:lab.c         **** 
  56:lab.c         **** // Other variables you can ignore for now
  57:lab.c         **** float Winv[4*4];
  58:lab.c         **** float omega_cmd2[4];
  59:lab.c         **** float omega_cmd[4];
  60:lab.c         **** float cmd[4];
  61:lab.c         **** 
  62:lab.c         **** /*------------- End Globals --------------*/
  63:lab.c         **** 
  64:lab.c         **** /*----------------------------------------------------------------------*/
  65:lab.c         **** /*---------------------------- End Preamble ----------------------------*/
  66:lab.c         **** /*----------------------------------------------------------------------*/
  67:lab.c         **** 
  68:lab.c         **** 
  69:lab.c         **** /*----------------------------------------------------------------------*/
  70:lab.c         **** /*------------------ Main Loop (called at 1 kHz) -----------------------*/
  71:lab.c         **** /*----------------------------------------------------------------------*/
  72:lab.c         **** void lab(void)
  73:lab.c         **** {
 113              	onymous_args = 0
 114              		mov	ip, sp
 115              	.LCFI0:
 116              		stmfd	sp!, {fp, ip, lr, pc}
 117 0000 0DC0A0E1 	.LCFI1:
 118              		sub	fp, ip, #4
 119 0004 00D82DE9 	.LCFI2:
 120              		.loc 1 75 0
 121 0008 04B04CE2 		ldr	r3, .L3
 122              		ldr	r2, [r3, #0]	@ float
  74:lab.c         **** 	// Desired Position
  75:lab.c         **** 	o_desired[0] = goalposyaw.x;	// x/North (m)
 123              	L3+4
 124 000c 50309FE5 		str	r2, [r3, #0]	@ float
 125 0010 002093E5 		.loc 1 76 0
 126 0014 4C309FE5 		ldr	r3, .L3
 127 0018 002083E5 		ldr	r2, [r3, #4]	@ float
  76:lab.c         **** 	o_desired[1] = goalposyaw.y;	// y/East (m)
 128              	r3, .L3+4
 129 001c 40309FE5 		str	r2, [r3, #4]	@ float
 130 0020 042093E5 		.loc 1 77 0
 131 0024 3C309FE5 		ldr	r3, .L3
 132 0028 042083E5 		ldr	r2, [r3, #8]	@ float
  77:lab.c         **** 	o_desired[2] = goalposyaw.z;	// z/Down (m)
 133              	r3, .L3+4
 134 002c 30309FE5 		str	r2, [r3, #8]	@ float
 135 0030 082093E5 		.loc 1 78 0
 136 0034 2C309FE5 		ldr	r3, .L3
 137 0038 082083E5 		ldr	r2, [r3, #12]	@ float
  78:lab.c         **** 	yaw_desired = goalposyaw.yaw;	// yaw (rad)
 138              	r3, .L3+8
 139 003c 20309FE5 		str	r2, [r3, #0]	@ float
 140 0040 0C2093E5 		.loc 1 81 0
 141 0044 20309FE5 		bl	do_sensor_fusion
 142 0048 002083E5 		.loc 1 84 0
  79:lab.c         **** 
  80:lab.c         **** 	// Fuse mocap measurements with IMU measurements
  81:lab.c         **** 	do_sensor_fusion();
 143              	ab3
 144 004c FEFFFFEB 		.loc 1 87 0
  82:lab.c         **** 
  83:lab.c         **** 	// Run controller to choose inputs (modify struct u)
  84:lab.c         **** 	lab3();
 145              	l	convert_input_to_motor_commands
 146 0050 FEFFFFEB 		.loc 1 88 0
  85:lab.c         **** 
  86:lab.c         **** 	// Convert inputs to motor commands
  87:lab.c         **** 	convert_input_to_motor_commands();
 147              	ub	sp, fp, #12
 148 0054 FEFFFFEB 		ldmfd	sp, {fp, sp, lr}
  88:lab.c         **** }
 149              	x	lr
 150 0058 0CD04BE2 	.L4:
 151 005c 00689DE8 		.align	2
 152 0060 1EFF2FE1 	.L3:
 153              		.word	goalposyaw
 154              		.word	o_desired
 155              		.word	yaw_desired
 156 0064 00000000 	.LFE2:
 158 006c 00000000 		.global	LED1toggle
 159              		.bss
 160              		.align	2
 163              	LED1toggle:
 164              		.space	4
 165              		.global	LED1count
 166              		.align	2
 169              	LED1count:
 170              		.space	4
 171              		.global	numCMDs
 172              		.align	2
 175              	numCMDs:
 176              		.space	4
 177              		.global	__nesf2
 178              		.global	__floatsidf
 179 0008 00000000 		.global	__adddf3
 180              		.global	__fixdfsi
 181              		.global	__subsf3
 182              		.global	__extendsfdf2
 183              		.global	__divdf3
 184              		.global	__truncdfsf2
 185              		.text
 186              		.align	2
 187              		.global	do_sensor_fusion
 189              	do_sensor_fusion:
 190              	.LFB3:
 191              		.loc 1 101 0
 192              		@ Function supports interworking.
 193              		@ args = 0, pretend = 0, frame = 4
  89:lab.c         **** /*----------------------------------------------------------------------*/
  90:lab.c         **** /*---------------- End Main Loop (called at 1 kHz) ---------------------*/
  91:lab.c         **** /*----------------------------------------------------------------------*/
  92:lab.c         **** 
  93:lab.c         **** /*----------------------------------------------------------------------*/
  94:lab.c         **** /*------------------------------ Helpers -------------------------------*/
  95:lab.c         **** /*----------------------------------------------------------------------*/
  96:lab.c         **** /*---------- Velocity Estimator ----------*/
  97:lab.c         **** int LED1toggle = 0;
  98:lab.c         **** int LED1count = 0;
  99:lab.c         **** int numCMDs = 0.0;
 100:lab.c         **** 
 101:lab.c         **** void do_sensor_fusion() {
 194              		mov	ip, sp
 195              	.LCFI3:
 196              		stmfd	sp!, {r4, fp, ip, lr, pc}
 197              	.LCFI4:
 198 0070 0DC0A0E1 		sub	fp, ip, #4
 199              	.LCFI5:
 200 0074 10D82DE9 		sub	sp, sp, #4
 201              	.LCFI6:
 202 0078 04B04CE2 		.loc 1 104 0
 203              		ldr	r3, .L18+8
 204 007c 04D04DE2 		ldr	r2, [r3, #8]	@ float
 205              		ldr	r3, .L18+12
 102:lab.c         **** 
 103:lab.c         ****     // Only proceed if the mocap measurements have changed
 104:lab.c         **** 	if ( (previousXMeas != mocap.dX) || (previousYMeas != mocap.dY) || (previousZMeas != mocap.dZ) ) {
 206              	, #0]	@ float
 207 0080 78339FE5 		mov	r0, r2
 208 0084 082093E5 		mov	r1, r3
 209 0088 74339FE5 		bl	__nesf2
 210 008c 003093E5 		mov	r3, r0
 211 0090 0200A0E1 		cmp	r3, #0
 212 0094 0310A0E1 		bne	.L6
 213 0098 FEFFFFEB 		ldr	r3, .L18+8
 214 009c 0030A0E1 		ldr	r2, [r3, #12]	@ float
 215 00a0 000053E3 		ldr	r3, .L18+16
 216 00a4 1400001A 		ldr	r3, [r3, #0]	@ float
 217 00a8 50339FE5 		mov	r0, r2
 218 00ac 0C2093E5 		mov	r1, r3
 219 00b0 50339FE5 		bl	__nesf2
 220 00b4 003093E5 		mov	r3, r0
 221 00b8 0200A0E1 		cmp	r3, #0
 222 00bc 0310A0E1 		bne	.L6
 223 00c0 FEFFFFEB 		ldr	r3, .L18+8
 224 00c4 0030A0E1 		ldr	r2, [r3, #16]	@ float
 225 00c8 000053E3 		ldr	r3, .L18+20
 226 00cc 0A00001A 		ldr	r3, [r3, #0]	@ float
 227 00d0 28339FE5 		mov	r0, r2
 228 00d4 102093E5 		mov	r1, r3
 229 00d8 2C339FE5 		bl	__nesf2
 230 00dc 003093E5 		mov	r3, r0
 231 00e0 0200A0E1 		cmp	r3, #0
 232 00e4 0310A0E1 		bne	.L6
 233 00e8 FEFFFFEB 		b	.L9
 234 00ec 0030A0E1 	.L6:
 235 00f0 000053E3 		.loc 1 105 0
 236 00f4 0000001A 		ldr	r3, .L18+24
 237 00f8 AF0000EA 		ldr	r3, [r3, #0]
 238              		mov	r0, r3
 105:lab.c         **** 		numCMDs = numCMDs + 1.0;
 239              	r4, r1
 240 00fc 0C339FE5 		mov	r0, r3
 241 0100 003093E5 		mov	r1, r4
 242 0104 0300A0E1 		mov	r2, #1069547520
 243 0108 FEFFFFEB 		add	r2, r2, #3145728
 244 010c 0030A0E1 		mov	r3, #0
 245 0110 0140A0E1 		bl	__adddf3
 246 0114 0300A0E1 		mov	r3, r0
 247 0118 0410A0E1 		mov	r4, r1
 248 011c FF25A0E3 		mov	r0, r3
 249 0120 032682E2 		mov	r1, r4
 250 0124 0030A0E3 		bl	__fixdfsi
 251 0128 FEFFFFEB 		mov	r2, r0
 252 012c 0030A0E1 		ldr	r3, .L18+24
 253 0130 0140A0E1 		str	r2, [r3, #0]
 254 0134 0300A0E1 		.loc 1 106 0
 255 0138 0410A0E1 		ldr	r3, .L18+28
 256 013c FEFFFFEB 		ldr	r3, [r3, #0]
 257 0140 0020A0E1 		add	r2, r3, #1
 258 0144 C4329FE5 		ldr	r3, .L18+28
 259 0148 002083E5 		str	r2, [r3, #0]
 106:lab.c         **** 		LED1count++;
 260              	, .L18+28
 261 014c C0329FE5 		ldr	r1, [r3, #0]
 262 0150 003093E5 		ldr	r3, .L18+32
 263 0154 012083E2 		smull	r2, r3, r1, r3
 264 0158 B4329FE5 		mov	r2, r3, asr #2
 265 015c 002083E5 		mov	r3, r1, asr #31
 107:lab.c         **** 		if (0==(LED1count%10)) {
 266              	2, r3, r2
 267 0160 AC329FE5 		str	r2, [fp, #-20]
 268 0164 001093E5 		ldr	r3, [fp, #-20]
 269 0168 A8329FE5 		mov	r3, r3, asl #2
 270 016c 9123C3E0 		ldr	r2, [fp, #-20]
 271 0170 4321A0E1 		add	r3, r3, r2
 272 0174 C13FA0E1 		mov	r3, r3, asl #1
 273 0178 022063E0 		rsb	r1, r3, r1
 274 017c 14200BE5 		str	r1, [fp, #-20]
 275 0180 14301BE5 		ldr	r3, [fp, #-20]
 276 0184 0331A0E1 		cmp	r3, #0
 277 0188 14201BE5 		bne	.L11
 278 018c 023083E0 		.loc 1 108 0
 279 0190 8330A0E1 		ldr	r3, .L18+36
 280 0194 011063E0 		ldr	r3, [r3, #0]
 281 0198 14100BE5 		cmp	r3, #0
 282 019c 14301BE5 		bne	.L13
 283 01a0 000053E3 		.loc 1 109 0
 284 01a4 1000001A 		mov	r0, #1
 108:lab.c         **** 			if (LED1toggle == 0) {
 285              	
 286 01a8 6C329FE5 		.loc 1 110 0
 287 01ac 003093E5 		ldr	r2, .L18+36
 288 01b0 000053E3 		mov	r3, #1
 289 01b4 0600001A 		str	r3, [r2, #0]
 109:lab.c         **** 				LED(1,OFF);
 290              	L11
 291 01b8 0100A0E3 	.L13:
 292 01bc 0010A0E3 		.loc 1 112 0
 293 01c0 FEFFFFEB 		mov	r0, #1
 110:lab.c         **** 				LED1toggle = 1;
 294              		r1, #1
 295 01c4 50229FE5 		bl	LED
 296 01c8 0130A0E3 		.loc 1 113 0
 297 01cc 003082E5 		ldr	r2, .L18+36
 298 01d0 050000EA 		mov	r3, #0
 299              		str	r3, [r2, #0]
 111:lab.c         **** 			} else {
 112:lab.c         **** 				LED(1,ON);
 300              		.loc 1 117 0
 301 01d4 0100A0E3 		ldr	r3, .L18+40
 302 01d8 0110A0E3 		ldr	r3, [r3, #0]
 303 01dc FEFFFFEB 		cmp	r3, #0
 113:lab.c         **** 				LED1toggle = 0;
 304              		.L15
 305 01e0 34229FE5 		.loc 1 120 0
 306 01e4 0030A0E3 		ldr	r3, .L18+8
 307 01e8 003082E5 		ldr	r2, [r3, #8]	@ float
 308              		ldr	r3, .L18+8
 114:lab.c         **** 			}
 115:lab.c         **** 		}
 116:lab.c         ****  		// Velocity Estimation
 117:lab.c         **** 		if (initialize == 0)
 309              	r2, [r3, #8]	@ float
 310 01ec 2C329FE5 		.loc 1 121 0
 311 01f0 003093E5 		ldr	r3, .L18+8
 312 01f4 000053E3 		ldr	r2, [r3, #12]	@ float
 313 01f8 1800001A 		ldr	r3, .L18+8
 118:lab.c         **** 		{
 119:lab.c         **** 			// Initialization
 120:lab.c         **** 			mocap.dX = mocap.dX;
 314              	r2, [r3, #12]	@ float
 315 01fc FC319FE5 		.loc 1 122 0
 316 0200 082093E5 		ldr	r3, .L18+8
 317 0204 F4319FE5 		ldr	r2, [r3, #16]	@ float
 318 0208 082083E5 		ldr	r3, .L18+8
 121:lab.c         **** 			mocap.dY = mocap.dY;
 319              	r2, [r3, #16]	@ float
 320 020c EC319FE5 		.loc 1 123 0
 321 0210 0C2093E5 		ldr	r2, .L18+8
 322 0214 E4319FE5 		ldr	r3, .L18+44	@ float
 323 0218 0C2083E5 		str	r3, [r2, #32]	@ float
 122:lab.c         **** 			mocap.dZ = mocap.dZ;
 324              	 1 124 0
 325 021c DC319FE5 		ldr	r2, .L18+8
 326 0220 102093E5 		ldr	r3, .L18+44	@ float
 327 0224 D4319FE5 		str	r3, [r2, #36]	@ float
 328 0228 102083E5 		.loc 1 125 0
 123:lab.c         **** 			mocap.dVx = 0.0;
 329              	r2, .L18+8
 330 022c CC219FE5 		ldr	r3, .L18+44	@ float
 331 0230 EC319FE5 		str	r3, [r2, #40]	@ float
 332 0234 203082E5 		.loc 1 127 0
 124:lab.c         **** 			mocap.dVy = 0.0;
 333              		r2, .L18+40
 334 0238 C0219FE5 		mov	r3, #1
 335 023c E0319FE5 		str	r3, [r2, #0]
 336 0240 243082E5 		b	.L9
 125:lab.c         **** 			mocap.dVz = 0.0;
 337              	:
 338 0244 B4219FE5 		.loc 1 132 0
 339 0248 D4319FE5 		ldr	r3, .L18+8
 340 024c 283082E5 		ldr	r2, [r3, #8]	@ float
 126:lab.c         **** 
 127:lab.c         **** 			initialize = 1;
 341              		r3, .L18+12
 342 0250 C8219FE5 		ldr	r3, [r3, #0]	@ float
 343 0254 0130A0E3 		mov	r0, r2
 344 0258 003082E5 		mov	r1, r3
 345 025c 560000EA 		bl	__subsf3
 346              		mov	r3, r0
 128:lab.c         **** 		}
 129:lab.c         **** 		else
 130:lab.c         **** 		{
 131:lab.c         **** 
 132:lab.c         **** 			mocap.dVx = (mocap.dX - previousXMeas)/0.02;
 347              	0, r3
 348 0260 98319FE5 		bl	__extendsfdf2
 349 0264 082093E5 		mov	r3, r0
 350 0268 94319FE5 		mov	r4, r1
 351 026c 003093E5 		mov	r0, r3
 352 0270 0200A0E1 		mov	r1, r4
 353 0274 0310A0E1 		adr	r2, .L18
 354 0278 FEFFFFEB 		ldmia	r2, {r2-r3}
 355 027c 0030A0E1 		bl	__divdf3
 356 0280 0300A0E1 		mov	r3, r0
 357 0284 FEFFFFEB 		mov	r4, r1
 358 0288 0030A0E1 		mov	r0, r3
 359 028c 0140A0E1 		mov	r1, r4
 360 0290 0300A0E1 		bl	__truncdfsf2
 361 0294 0410A0E1 		mov	r2, r0
 362 0298 562F8FE2 		ldr	r3, .L18+8
 363 029c 0C0092E8 		str	r2, [r3, #32]	@ float
 364 02a0 FEFFFFEB 		.loc 1 133 0
 365 02a4 0030A0E1 		ldr	r3, .L18+8
 366 02a8 0140A0E1 		ldr	r2, [r3, #12]	@ float
 367 02ac 0300A0E1 		ldr	r3, .L18+16
 368 02b0 0410A0E1 		ldr	r3, [r3, #0]	@ float
 369 02b4 FEFFFFEB 		mov	r0, r2
 370 02b8 0020A0E1 		mov	r1, r3
 371 02bc 3C319FE5 		bl	__subsf3
 372 02c0 202083E5 		mov	r3, r0
 133:lab.c         **** 			mocap.dVy = (mocap.dY - previousYMeas)/0.02;
 373              	df2
 374 02c4 34319FE5 		mov	r3, r0
 375 02c8 0C2093E5 		mov	r4, r1
 376 02cc 34319FE5 		mov	r0, r3
 377 02d0 003093E5 		mov	r1, r4
 378 02d4 0200A0E1 		adr	r2, .L18
 379 02d8 0310A0E1 		ldmia	r2, {r2-r3}
 380 02dc FEFFFFEB 		bl	__divdf3
 381 02e0 0030A0E1 		mov	r3, r0
 382 02e4 0300A0E1 		mov	r4, r1
 383 02e8 FEFFFFEB 		mov	r0, r3
 384 02ec 0030A0E1 		mov	r1, r4
 385 02f0 0140A0E1 		bl	__truncdfsf2
 386 02f4 0300A0E1 		mov	r2, r0
 387 02f8 0410A0E1 		ldr	r3, .L18+8
 388 02fc F4208FE2 		str	r2, [r3, #36]	@ float
 389 0300 0C0092E8 		.loc 1 134 0
 390 0304 FEFFFFEB 		ldr	r3, .L18+8
 391 0308 0030A0E1 		ldr	r2, [r3, #16]	@ float
 392 030c 0140A0E1 		ldr	r3, .L18+20
 393 0310 0300A0E1 		ldr	r3, [r3, #0]	@ float
 394 0314 0410A0E1 		mov	r0, r2
 395 0318 FEFFFFEB 		mov	r1, r3
 396 031c 0020A0E1 		bl	__subsf3
 397 0320 D8309FE5 		mov	r3, r0
 398 0324 242083E5 		mov	r0, r3
 134:lab.c         **** 			mocap.dVz = (mocap.dZ - previousZMeas)/0.02;
 399              	 r0
 400 0328 D0309FE5 		mov	r4, r1
 401 032c 102093E5 		mov	r0, r3
 402 0330 D4309FE5 		mov	r1, r4
 403 0334 003093E5 		adr	r2, .L18
 404 0338 0200A0E1 		ldmia	r2, {r2-r3}
 405 033c 0310A0E1 		bl	__divdf3
 406 0340 FEFFFFEB 		mov	r3, r0
 407 0344 0030A0E1 		mov	r4, r1
 408 0348 0300A0E1 		mov	r0, r3
 409 034c FEFFFFEB 		mov	r1, r4
 410 0350 0030A0E1 		bl	__truncdfsf2
 411 0354 0140A0E1 		mov	r2, r0
 412 0358 0300A0E1 		ldr	r3, .L18+8
 413 035c 0410A0E1 		str	r2, [r3, #40]	@ float
 414 0360 90208FE2 		.loc 1 137 0
 415 0364 0C0092E8 		ldr	r3, .L18+8
 416 0368 FEFFFFEB 		ldr	r2, [r3, #8]	@ float
 417 036c 0030A0E1 		ldr	r3, .L18+8
 418 0370 0140A0E1 		str	r2, [r3, #8]	@ float
 419 0374 0300A0E1 		.loc 1 138 0
 420 0378 0410A0E1 		ldr	r3, .L18+8
 421 037c FEFFFFEB 		ldr	r2, [r3, #12]	@ float
 422 0380 0020A0E1 		ldr	r3, .L18+8
 423 0384 74309FE5 		str	r2, [r3, #12]	@ float
 424 0388 282083E5 		.loc 1 139 0
 135:lab.c         **** 
 136:lab.c         **** 			// Set Position
 137:lab.c         **** 			mocap.dX = mocap.dX;
 425              	r3, #16]	@ float
 426 038c 6C309FE5 		ldr	r3, .L18+8
 427 0390 082093E5 		str	r2, [r3, #16]	@ float
 428 0394 64309FE5 	.L9:
 429 0398 082083E5 		.loc 1 145 0
 138:lab.c         **** 			mocap.dY = mocap.dY;
 430              	r3, .L18+8
 431 039c 5C309FE5 		ldr	r2, [r3, #8]	@ float
 432 03a0 0C2093E5 		ldr	r3, .L18+12
 433 03a4 54309FE5 		str	r2, [r3, #0]	@ float
 434 03a8 0C2083E5 		.loc 1 146 0
 139:lab.c         **** 			mocap.dZ = mocap.dZ;
 435              	r3, .L18+8
 436 03ac 4C309FE5 		ldr	r2, [r3, #12]	@ float
 437 03b0 102093E5 		ldr	r3, .L18+16
 438 03b4 44309FE5 		str	r2, [r3, #0]	@ float
 439 03b8 102083E5 		.loc 1 147 0
 440              		ldr	r3, .L18+8
 140:lab.c         **** 
 141:lab.c         **** 			/*--- End Low Pass Filtering ---*/
 142:lab.c         **** 		}
 143:lab.c         **** 	}
 144:lab.c         **** 	// Save Current MoCap Measurement as Previous Measurement
 145:lab.c         **** 	previousXMeas = mocap.dX;
 441              	2, [r3, #16]	@ float
 442 03bc 3C309FE5 		ldr	r3, .L18+20
 443 03c0 082093E5 		str	r2, [r3, #0]	@ float
 444 03c4 38309FE5 		.loc 1 149 0
 445 03c8 002083E5 		sub	sp, fp, #16
 146:lab.c         **** 	previousYMeas = mocap.dY;
 446              	d	sp, {r4, fp, sp, lr}
 447 03cc 2C309FE5 		bx	lr
 448 03d0 0C2093E5 	.L19:
 449 03d4 2C309FE5 		.align	2
 450 03d8 002083E5 	.L18:
 147:lab.c         **** 	previousZMeas = mocap.dZ;
 451              	d	1066695393
 452 03dc 1C309FE5 		.word	1202590843
 453 03e0 102093E5 		.word	mocap
 454 03e4 20309FE5 		.word	previousXMeas
 455 03e8 002083E5 		.word	previousYMeas
 148:lab.c         **** 
 149:lab.c         **** }
 456              	d	previousZMeas
 457 03ec 10D04BE2 		.word	numCMDs
 458 03f0 10689DE8 		.word	LED1count
 459 03f4 1EFF2FE1 		.word	1717986919
 460              		.word	LED1toggle
 461              		.word	initialize
 462              		.word	0
 463 03f8 E17A943F 	.LFE3:
 465 0400 00000000 		.global	LED0timeCount
 466 0404 00000000 		.bss
 467 0408 00000000 		.align	2
 470 0414 00000000 	LED0timeCount:
 471 0418 67666666 		.space	4
 472 041c 00000000 		.global	LED0toggle
 473 0420 00000000 		.align	2
 476              	LED0toggle:
 477              		.space	4
 478              		.global	__mulsf3
 479              		.text
 480              		.align	2
 481              		.global	lab3
 483 000c 00000000 	lab3:
 484              	.LFB4:
 485              		.loc 1 159 0
 486              		@ Function supports interworking.
 487              		@ args = 0, pretend = 0, frame = 16
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489 0010 00000000 		mov	ip, sp
 490              	.LCFI7:
 491              		stmfd	sp!, {fp, ip, lr, pc}
 492              	.LCFI8:
 493              		sub	fp, ip, #4
 494              	.LCFI9:
 495              		sub	sp, sp, #24
 496              	.LCFI10:
 150:lab.c         **** 
 151:lab.c         **** /*-------- End Velocity Estimator --------*/
 152:lab.c         **** 
 153:lab.c         **** 
 154:lab.c         **** 
 155:lab.c         **** /*-------------- Controller --------------*/
 156:lab.c         **** int LED0timeCount = 0;
 157:lab.c         **** int LED0toggle = 0;
 158:lab.c         **** 
 159:lab.c         **** void lab3() {
 497              	 #0]
 498              		cmp	r3, #250
 499              		bne	.L21
 500              		.loc 1 166 0
 501 0428 0DC0A0E1 		ldr	r2, .L26
 502              		mov	r3, #0
 503 042c 00D82DE9 		str	r3, [r2, #0]
 504              		.loc 1 167 0
 505 0430 04B04CE2 		ldr	r3, .L26+4
 506              		ldr	r3, [r3, #0]
 507 0434 18D04DE2 		cmp	r3, #0
 508              		bne	.L23
 160:lab.c         **** 
 161:lab.c         ****     ////////////////////////
 162:lab.c         ****     // DO NOT MODIFY
 163:lab.c         ****     //
 164:lab.c         ****     // Turn LEDs on and off for diagnostics
 165:lab.c         **** 	if (LED0timeCount == 250) {
 509              	0
 510 0438 D0329FE5 		mov	r0, #0
 511 043c 003093E5 		mov	r1, #0
 512 0440 FA0053E3 		bl	LED
 513 0444 1300001A 		.loc 1 169 0
 166:lab.c         **** 		LED0timeCount = 0;
 514              	r2, .L26+4
 515 0448 C0229FE5 		mov	r3, #1
 516 044c 0030A0E3 		str	r3, [r2, #0]
 517 0450 003082E5 		b	.L21
 167:lab.c         **** 		if (LED0toggle == 0) {
 518              	:
 519 0454 B8329FE5 		.loc 1 171 0
 520 0458 003093E5 		mov	r0, #0
 521 045c 000053E3 		mov	r1, #1
 522 0460 0600001A 		bl	LED
 168:lab.c         **** 			LED(0,OFF);
 523              	 1 172 0
 524 0464 0000A0E3 		ldr	r2, .L26+4
 525 0468 0010A0E3 		mov	r3, #0
 526 046c FEFFFFEB 		str	r3, [r2, #0]
 169:lab.c         **** 			LED0toggle = 1;
 527              	:
 528 0470 9C229FE5 		.loc 1 175 0
 529 0474 0130A0E3 		ldr	r3, .L26
 530 0478 003082E5 		ldr	r3, [r3, #0]
 531 047c 050000EA 		add	r2, r3, #1
 532              		ldr	r3, .L26
 170:lab.c         **** 		} else {
 171:lab.c         **** 			LED(0,ON);
 533              	2, [r3, #0]
 534 0480 0000A0E3 		.loc 1 200 0
 535 0484 0110A0E3 		ldr	r3, .L26+8
 536 0488 FEFFFFEB 		ldr	r2, [r3, #8]	@ float
 172:lab.c         **** 			LED0toggle = 0;
 537              		r3, .L26+12
 538 048c 80229FE5 		ldr	r3, [r3, #0]	@ float
 539 0490 0030A0E3 		mov	r0, r2
 540 0494 003082E5 		mov	r1, r3
 541              		bl	__subsf3
 173:lab.c         **** 		}
 174:lab.c         **** 	}
 175:lab.c         **** 	LED0timeCount++;
 542              	r3, r0
 543 0498 70329FE5 		mov	r2, r3
 544 049c 003093E5 		ldr	r3, .L26+16
 545 04a0 012083E2 		str	r2, [r3, #0]	@ float
 546 04a4 64329FE5 		.loc 1 201 0
 547 04a8 002083E5 		ldr	r3, .L26+8
 176:lab.c         ****     //
 177:lab.c         ****     ////////////////////////
 178:lab.c         **** 
 179:lab.c         ****     // Compute: xd = x - xe
 180:lab.c         ****     //
 181:lab.c         ****     //  xd, a 12x1 matrix, is represented in C code as a float array of length 12
 182:lab.c         ****     //  If you order states as o, theta, v, w, then:
 183:lab.c         ****     //      xd[0] is o1 - o1e
 184:lab.c         ****     //      xd[1] is o2 - o2e
 185:lab.c         ****     //      ...
 186:lab.c         ****     //      xd[11] is w3 - w3e
 187:lab.c         ****     //
 188:lab.c         ****     //  measurement of o:
 189:lab.c         ****     //      mocap.dX, mocap.dY, mocap.dZ
 190:lab.c         ****     //  measurement of theta:
 191:lab.c         ****     //      mocap.dThetaz, imusensor.dThetay, imusensor.dThetax
 192:lab.c         ****     //  measurement of v:
 193:lab.c         ****     //      mocap.dVx, mocap.dVy, mocap.dVz
 194:lab.c         ****     //  measurement of w:
 195:lab.c         ****     //      imusensor.dOmegax, imusensor.dOmegay, imusensor.dOmegaz
 196:lab.c         ****     //
 197:lab.c         ****     // CHANGE!!!
 198:lab.c         **** 
 199:lab.c         **** 
 200:lab.c         ****     xd[0] = mocap.dX - goalposyaw.x;
 548              	2, [r3, #12]	@ float
 549 04ac 64329FE5 		ldr	r3, .L26+12
 550 04b0 082093E5 		ldr	r3, [r3, #4]	@ float
 551 04b4 60329FE5 		mov	r0, r2
 552 04b8 003093E5 		mov	r1, r3
 553 04bc 0200A0E1 		bl	__subsf3
 554 04c0 0310A0E1 		mov	r3, r0
 555 04c4 FEFFFFEB 		mov	r2, r3
 556 04c8 0030A0E1 		ldr	r3, .L26+16
 557 04cc 0320A0E1 		str	r2, [r3, #4]	@ float
 558 04d0 48329FE5 		.loc 1 202 0
 559 04d4 002083E5 		ldr	r3, .L26+8
 201:lab.c         ****     xd[1] = mocap.dY - goalposyaw.y;
 560              	, #16]	@ float
 561 04d8 38329FE5 		ldr	r3, .L26+12
 562 04dc 0C2093E5 		ldr	r3, [r3, #8]	@ float
 563 04e0 34329FE5 		mov	r0, r2
 564 04e4 043093E5 		mov	r1, r3
 565 04e8 0200A0E1 		bl	__subsf3
 566 04ec 0310A0E1 		mov	r3, r0
 567 04f0 FEFFFFEB 		mov	r2, r3
 568 04f4 0030A0E1 		ldr	r3, .L26+16
 569 04f8 0320A0E1 		str	r2, [r3, #8]	@ float
 570 04fc 1C329FE5 		.loc 1 203 0
 571 0500 042083E5 		ldr	r3, .L26+8
 202:lab.c         ****     xd[2] = mocap.dZ - goalposyaw.z;
 572              	, #28]	@ float
 573 0504 0C329FE5 		ldr	r3, .L26+16
 574 0508 102093E5 		str	r2, [r3, #12]	@ float
 575 050c 08329FE5 		.loc 1 204 0
 576 0510 083093E5 		ldr	r3, .L26+20
 577 0514 0200A0E1 		ldr	r2, [r3, #8]	@ float
 578 0518 0310A0E1 		ldr	r3, .L26+16
 579 051c FEFFFFEB 		str	r2, [r3, #16]	@ float
 580 0520 0030A0E1 		.loc 1 205 0
 581 0524 0320A0E1 		ldr	r3, .L26+20
 582 0528 F0319FE5 		ldr	r2, [r3, #4]	@ float
 583 052c 082083E5 		ldr	r3, .L26+16
 203:lab.c         ****     xd[3] =  mocap.dThetaz - 0.0;
 584              	, #20]	@ float
 585 0530 E0319FE5 		.loc 1 206 0
 586 0534 1C2093E5 		ldr	r3, .L26+8
 587 0538 E0319FE5 		ldr	r2, [r3, #32]	@ float
 588 053c 0C2083E5 		ldr	r3, .L26+16
 204:lab.c         ****     xd[4] =  imusensor.dThetay - 0.0;
 589              	r2, [r3, #24]	@ float
 590 0540 DC319FE5 		.loc 1 207 0
 591 0544 082093E5 		ldr	r3, .L26+8
 592 0548 D0319FE5 		ldr	r2, [r3, #36]	@ float
 593 054c 102083E5 		ldr	r3, .L26+16
 205:lab.c         ****     xd[5] =  imusensor.dThetax - 0.0;
 594              	r2, [r3, #28]	@ float
 595 0550 CC319FE5 		.loc 1 208 0
 596 0554 042093E5 		ldr	r3, .L26+8
 597 0558 C0319FE5 		ldr	r2, [r3, #40]	@ float
 598 055c 142083E5 		ldr	r3, .L26+16
 206:lab.c         ****     xd[6] = mocap.dVx - 0.0;
 599              	r2, [r3, #32]	@ float
 600 0560 B0319FE5 		.loc 1 209 0
 601 0564 202093E5 		ldr	r3, .L26+20
 602 0568 B0319FE5 		ldr	r2, [r3, #28]	@ float
 603 056c 182083E5 		ldr	r3, .L26+16
 207:lab.c         ****     xd[7] = mocap.dVy - 0.0;
 604              	r2, [r3, #36]	@ float
 605 0570 A0319FE5 		.loc 1 210 0
 606 0574 242093E5 		ldr	r3, .L26+20
 607 0578 A0319FE5 		ldr	r2, [r3, #32]	@ float
 608 057c 1C2083E5 		ldr	r3, .L26+16
 208:lab.c         ****     xd[8] = mocap.dVz - 0.0;
 609              	r2, [r3, #40]	@ float
 610 0580 90319FE5 		.loc 1 211 0
 611 0584 282093E5 		ldr	r3, .L26+20
 612 0588 90319FE5 		ldr	r2, [r3, #36]	@ float
 613 058c 202083E5 		ldr	r3, .L26+16
 209:lab.c         ****     xd[9] = imusensor.dOmegax - 0.0;
 614              	r2, [r3, #44]	@ float
 615 0590 8C319FE5 		.loc 1 218 0
 616 0594 1C2093E5 		ldr	r3, .L26+16
 617 0598 80319FE5 		str	r3, [sp, #0]
 618 059c 242083E5 		ldr	r3, .L26+24
 210:lab.c         ****     xd[10] = imusensor.dOmegay - 0.0;
 619              	r3, [sp, #4]
 620 05a0 7C319FE5 		mov	r0, #4
 621 05a4 202093E5 		mov	r1, #12
 622 05a8 70319FE5 		mov	r2, #1
 623 05ac 282083E5 		ldr	r3, .L26+28
 211:lab.c         ****     xd[11] = imusensor.dOmegaz - 0.0;
 624              	atrix_multiply
 625 05b0 6C319FE5 		.loc 1 229 0
 626 05b4 242093E5 		ldr	r3, .L26+32
 627 05b8 60319FE5 		ldr	r2, [r3, #0]	@ float
 628 05bc 2C2083E5 		ldr	r3, .L26+36
 212:lab.c         **** 
 213:lab.c         ****     //float C[4];
 214:lab.c         ****     // Compute: K*(x - xe)
 215:lab.c         ****     //
 216:lab.c         ****     //  To find C = A * B, where A is mxn and B is nxp, use:
 217:lab.c         ****     //      matrix_multiply(m, n, p, A, B, C);
 218:lab.c         ****     matrix_multiply(4, 12, 1, K, xd, cnt_u);
 629              	r3, [r3, #0]	@ float
 630 05c0 58319FE5 		mov	r0, r2
 631 05c4 00308DE5 		mov	r1, r3
 632 05c8 58319FE5 		bl	__mulsf3
 633 05cc 04308DE5 		mov	r3, r0
 634 05d0 0400A0E3 		mov	r2, r3
 635 05d4 0C10A0E3 		ldr	r3, .L26+40	@ float
 636 05d8 0120A0E3 		str	r3, [fp, #-28]	@ float
 637 05dc 48319FE5 		ldr	r3, .L26+40	@ float
 638 05e0 FEFFFFEB 		str	r3, [fp, #-24]	@ float
 219:lab.c         **** 
 220:lab.c         ****     //  In particular, you may wish to compute:
 221:lab.c         ****     //      cnt_u = K * xd
 222:lab.c         ****     //
 223:lab.c         ****     //  ("cnt_u" is the variable in which you need to put
 224:lab.c         ****     //   the input; for now, it is a convenient place to
 225:lab.c         ****     //   store the result of this intermediate calculation)
 226:lab.c         ****     //
 227:lab.c         ****     // CHANGE!!!
 228:lab.c         **** 
 229:lab.c         ****     float ue[4] = {0,0,0,mass*g};
 639              	L26+40	@ float
 640 05e4 44319FE5 		str	r3, [fp, #-20]	@ float
 641 05e8 002093E5 		str	r2, [fp, #-16]	@ float
 642 05ec 40319FE5 		.loc 1 235 0
 643 05f0 003093E5 		ldr	r2, [fp, #-28]	@ float
 644 05f4 0200A0E1 		ldr	r3, .L26+24
 645 05f8 0310A0E1 		ldr	r3, [r3, #0]	@ float
 646 05fc FEFFFFEB 		mov	r0, r2
 647 0600 0030A0E1 		mov	r1, r3
 648 0604 0320A0E1 		bl	__subsf3
 649 0608 28319FE5 		mov	r3, r0
 650 060c 1C300BE5 		mov	r2, r3
 651 0610 20319FE5 		ldr	r3, .L26+24
 652 0614 18300BE5 		str	r2, [r3, #0]	@ float
 653 0618 18319FE5 		.loc 1 236 0
 654 061c 14300BE5 		ldr	r2, [fp, #-24]	@ float
 655 0620 10200BE5 		ldr	r3, .L26+24
 230:lab.c         ****     // Compute: ue - K*(x - xe)
 231:lab.c         ****     //
 232:lab.c         ****     //  You should put the result in cnt_u.
 233:lab.c         ****     //
 234:lab.c         ****     // CHANGE!!!
 235:lab.c         ****     cnt_u[0] = ue[0] - cnt_u[0];
 656              		@ float
 657 0624 1C201BE5 		mov	r0, r2
 658 0628 F8309FE5 		mov	r1, r3
 659 062c 003093E5 		bl	__subsf3
 660 0630 0200A0E1 		mov	r3, r0
 661 0634 0310A0E1 		mov	r2, r3
 662 0638 FEFFFFEB 		ldr	r3, .L26+24
 663 063c 0030A0E1 		str	r2, [r3, #4]	@ float
 664 0640 0320A0E1 		.loc 1 237 0
 665 0644 DC309FE5 		ldr	r2, [fp, #-20]	@ float
 666 0648 002083E5 		ldr	r3, .L26+24
 236:lab.c         ****     cnt_u[1] = ue[1] - cnt_u[1];
 667              	3, #8]	@ float
 668 064c 18201BE5 		mov	r0, r2
 669 0650 D0309FE5 		mov	r1, r3
 670 0654 043093E5 		bl	__subsf3
 671 0658 0200A0E1 		mov	r3, r0
 672 065c 0310A0E1 		mov	r2, r3
 673 0660 FEFFFFEB 		ldr	r3, .L26+24
 674 0664 0030A0E1 		str	r2, [r3, #8]	@ float
 675 0668 0320A0E1 		.loc 1 238 0
 676 066c B4309FE5 		ldr	r2, [fp, #-16]	@ float
 677 0670 042083E5 		ldr	r3, .L26+24
 237:lab.c         ****     cnt_u[2] = ue[2] - cnt_u[2];
 678              	3, #12]	@ float
 679 0674 14201BE5 		mov	r0, r2
 680 0678 A8309FE5 		mov	r1, r3
 681 067c 083093E5 		bl	__subsf3
 682 0680 0200A0E1 		mov	r3, r0
 683 0684 0310A0E1 		mov	r2, r3
 684 0688 FEFFFFEB 		ldr	r3, .L26+24
 685 068c 0030A0E1 		str	r2, [r3, #12]	@ float
 686 0690 0320A0E1 		.loc 1 244 0
 687 0694 8C309FE5 		ldr	r3, .L26+24
 688 0698 082083E5 		ldr	r2, [r3, #0]	@ float
 238:lab.c         ****     cnt_u[3] = ue[3] - cnt_u[3];
 689              	26+44
 690 069c 10201BE5 		str	r2, [r3, #0]	@ float
 691 06a0 80309FE5 		.loc 1 245 0
 692 06a4 0C3093E5 		ldr	r3, .L26+24
 693 06a8 0200A0E1 		ldr	r2, [r3, #4]	@ float
 694 06ac 0310A0E1 		ldr	r3, .L26+44
 695 06b0 FEFFFFEB 		str	r2, [r3, #4]	@ float
 696 06b4 0030A0E1 		.loc 1 246 0
 697 06b8 0320A0E1 		ldr	r3, .L26+24
 698 06bc 64309FE5 		ldr	r2, [r3, #8]	@ float
 699 06c0 0C2083E5 		ldr	r3, .L26+44
 239:lab.c         **** 
 240:lab.c         ****     ////////////////////////
 241:lab.c         ****     // DO NOT MODIFY
 242:lab.c         ****     //
 243:lab.c         **** 	// Store result
 244:lab.c         **** 	u.u1 = cnt_u[0];
 700              	3, #8]	@ float
 701 06c4 5C309FE5 		.loc 1 247 0
 702 06c8 002093E5 		ldr	r3, .L26+24
 703 06cc 68309FE5 		ldr	r2, [r3, #12]	@ float
 704 06d0 002083E5 		ldr	r3, .L26+44
 245:lab.c         **** 	u.u2 = cnt_u[1];
 705              	r2, [r3, #12]	@ float
 706 06d4 4C309FE5 		.loc 1 250 0
 707 06d8 042093E5 		sub	sp, fp, #12
 708 06dc 58309FE5 		ldmfd	sp, {fp, sp, lr}
 709 06e0 042083E5 		bx	lr
 246:lab.c         **** 	u.u3 = cnt_u[2];
 710              	
 711 06e4 3C309FE5 		.align	2
 712 06e8 082093E5 	.L26:
 713 06ec 48309FE5 		.word	LED0timeCount
 714 06f0 082083E5 		.word	LED0toggle
 247:lab.c         **** 	u.u4 = cnt_u[3];
 715              	rd	mocap
 716 06f4 2C309FE5 		.word	goalposyaw
 717 06f8 0C2093E5 		.word	xd
 718 06fc 38309FE5 		.word	imusensor
 719 0700 0C2083E5 		.word	cnt_u
 248:lab.c         ****     //
 249:lab.c         ****     ////////////////////////
 250:lab.c         **** }
 720              	d	K
 721 0704 0CD04BE2 		.word	mass
 722 0708 00689DE8 		.word	g
 723 070c 1EFF2FE1 		.word	0
 724              		.word	u
 725              	.LFE4:
 727 0710 00000000 		.global	__muldf3
 728 0714 00000000 		.global	__gtsf2
 729 0718 00000000 		.global	__ltsf2
 730 071c 00000000 		.global	__subdf3
 731 0720 00000000 		.global	__fixunssfsi
 732 0724 00000000 		.align	2
 733 0728 00000000 		.global	convert_input_to_motor_commands
 735 0730 00000000 	convert_input_to_motor_commands:
 736 0734 00000000 	.LFB5:
 737 0738 00000000 		.loc 1 256 0
 738 073c 00000000 		@ Function supports interworking.
 739              		@ args = 0, pretend = 0, frame = 16
 740              		@ frame_needed = 1, uses_anonymous_args = 0
 741              		mov	ip, sp
 742              	.LCFI11:
 743              		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 744              	.LCFI12:
 745              		sub	fp, ip, #4
 746              	.LCFI13:
 747              		sub	sp, sp, #24
 748              	.LCFI14:
 749              		.loc 1 258 0
 750              		ldr	r2, .L45+16
 251:lab.c         **** /*------------ End Lab 3 ------------*/
 252:lab.c         **** 
 253:lab.c         **** /*------------ End Controller ------------*/
 254:lab.c         **** 
 255:lab.c         **** /*---------------- Command ---------------*/
 256:lab.c         **** void convert_input_to_motor_commands() {
 751              		.loc 1 264 0
 752              		ldr	r2, .L45+16
 753              		mov	r3, #1
 754              		strb	r3, [r2, #1]
 755 0740 0DC0A0E1 		.loc 1 270 0
 756              		ldr	r3, .L45+20
 757 0744 70D82DE9 		ldr	r3, [r3, #0]	@ float
 758              		mov	r0, r3
 759 0748 04B04CE2 		bl	__extendsfdf2
 760              		mov	r3, r0
 761 074c 18D04DE2 		mov	r4, r1
 762              		mov	r0, r3
 257:lab.c         **** 	/////////////// Controller Settings ////////////
 258:lab.c         **** 	WO_SDK.ctrl_mode=0x00;  //0x00: direct individual motor control (individual commands for motors 0.
 763              		mov	r2, r3
 764 0750 FC249FE5 		mov	r3, r4
 765 0754 0030A0E3 		bl	__adddf3
 766 0758 0030C2E5 		mov	r3, r0
 259:lab.c         **** 				//0x01: direct motor control using standard output mapping: commands are interpreted as pitch, 
 260:lab.c         **** 				//      and thrust inputs; no attitude controller active
 261:lab.c         **** 				//0x02: attitude and throttle control: commands are input for standard attitude controller
 262:lab.c         **** 				//0x03: GPS waypoint control
 263:lab.c         **** 
 264:lab.c         **** 	WO_SDK.ctrl_enabled=1;	//0: disable control by HL processor
 767              		r4, r1
 768 075c F0249FE5 		mov	r5, r3
 769 0760 0130A0E3 		mov	r6, r4
 770 0764 0130C2E5 		ldr	r3, .L45+24
 265:lab.c         **** 				//1: enable control by HL processor
 266:lab.c         **** 	////////////////////////////////////////////////
 267:lab.c         **** 
 268:lab.c         **** 	//////// Translate commanded torques and thrust into rotor speed and commands ////////////
 269:lab.c         **** 	// NOTE METHOD BELOW ASSUMES THAT CG IS IN THE SAME PLANE AS THE ROTORS
 270:lab.c         **** 	float twolkF = 1.0/(2.0*l*kF);
 771              		r3, [r3, #0]	@ float
 772 0768 E8349FE5 		mov	r0, r3
 773 076c 003093E5 		bl	__extendsfdf2
 774 0770 0300A0E1 		mov	r3, r0
 775 0774 FEFFFFEB 		mov	r4, r1
 776 0778 0030A0E1 		mov	r0, r5
 777 077c 0140A0E1 		mov	r1, r6
 778 0780 0300A0E1 		mov	r2, r3
 779 0784 0410A0E1 		mov	r3, r4
 780 0788 0320A0E1 		bl	__muldf3
 781 078c 0430A0E1 		mov	r3, r0
 782 0790 FEFFFFEB 		mov	r4, r1
 783 0794 0030A0E1 		mov	r0, #1069547520
 784 0798 0140A0E1 		add	r0, r0, #3145728
 785 079c 0350A0E1 		mov	r1, #0
 786 07a0 0460A0E1 		mov	r2, r3
 787 07a4 B0349FE5 		mov	r3, r4
 788 07a8 003093E5 		bl	__divdf3
 789 07ac 0300A0E1 		mov	r3, r0
 790 07b0 FEFFFFEB 		mov	r4, r1
 791 07b4 0030A0E1 		mov	r0, r3
 792 07b8 0140A0E1 		mov	r1, r4
 793 07bc 0500A0E1 		bl	__truncdfsf2
 794 07c0 0610A0E1 		mov	r3, r0
 795 07c4 0320A0E1 		str	r3, [fp, #-40]	@ float
 796 07c8 0430A0E1 		.loc 1 271 0
 797 07cc FEFFFFEB 		ldr	r3, .L45+24
 798 07d0 0030A0E1 		ldr	r3, [r3, #0]	@ float
 799 07d4 0140A0E1 		mov	r0, r3
 800 07d8 FF05A0E3 		bl	__extendsfdf2
 801 07dc 030680E2 		mov	r3, r0
 802 07e0 0010A0E3 		mov	r4, r1
 803 07e4 0320A0E1 		mov	r0, r3
 804 07e8 0430A0E1 		mov	r1, r4
 805 07ec FEFFFFEB 		mov	r2, #1073741824
 806 07f0 0030A0E1 		add	r2, r2, #1048576
 807 07f4 0140A0E1 		mov	r3, #0
 808 07f8 0300A0E1 		bl	__muldf3
 809 07fc 0410A0E1 		mov	r3, r0
 810 0800 FEFFFFEB 		mov	r4, r1
 811 0804 0030A0E1 		mov	r0, #1069547520
 812 0808 28300BE5 		add	r0, r0, #3145728
 271:lab.c         **** 	float fourkF = 1.0/(4.0*kF);
 813              	divdf3
 814 080c 48349FE5 		mov	r3, r0
 815 0810 003093E5 		mov	r4, r1
 816 0814 0300A0E1 		mov	r0, r3
 817 0818 FEFFFFEB 		mov	r1, r4
 818 081c 0030A0E1 		bl	__truncdfsf2
 819 0820 0140A0E1 		mov	r3, r0
 820 0824 0300A0E1 		str	r3, [fp, #-36]	@ float
 821 0828 0410A0E1 		.loc 1 272 0
 822 082c 0121A0E3 		ldr	r3, .L45+28
 823 0830 012682E2 		ldr	r3, [r3, #0]	@ float
 824 0834 0030A0E3 		mov	r0, r3
 825 0838 FEFFFFEB 		bl	__extendsfdf2
 826 083c 0030A0E1 		mov	r3, r0
 827 0840 0140A0E1 		mov	r4, r1
 828 0844 FF05A0E3 		mov	r0, r3
 829 0848 030680E2 		mov	r1, r4
 830 084c 0010A0E3 		mov	r2, #1073741824
 831 0850 0320A0E1 		add	r2, r2, #1048576
 832 0854 0430A0E1 		mov	r3, #0
 833 0858 FEFFFFEB 		bl	__muldf3
 834 085c 0030A0E1 		mov	r3, r0
 835 0860 0140A0E1 		mov	r4, r1
 836 0864 0300A0E1 		mov	r0, #1069547520
 837 0868 0410A0E1 		add	r0, r0, #3145728
 838 086c FEFFFFEB 		mov	r1, #0
 839 0870 0030A0E1 		mov	r2, r3
 840 0874 24300BE5 		mov	r3, r4
 272:lab.c         **** 	float fourkM = 1.0/(4.0*kM);
 841              	v	r4, r1
 842 0878 E0339FE5 		mov	r0, r3
 843 087c 003093E5 		mov	r1, r4
 844 0880 0300A0E1 		bl	__truncdfsf2
 845 0884 FEFFFFEB 		mov	r3, r0
 846 0888 0030A0E1 		str	r3, [fp, #-32]	@ float
 847 088c 0140A0E1 		.loc 1 274 0
 848 0890 0300A0E1 		ldr	r2, .L45+32
 849 0894 0410A0E1 		ldr	r3, .L45+36	@ float
 850 0898 0121A0E3 		str	r3, [r2, #0]	@ float
 851 089c 012682E2 		.loc 1 275 0
 852 08a0 0030A0E3 		ldr	r2, .L45+32
 853 08a4 FEFFFFEB 		ldr	r3, [fp, #-40]	@ float
 854 08a8 0030A0E1 		str	r3, [r2, #4]	@ float
 855 08ac 0140A0E1 		.loc 1 276 0
 856 08b0 FF05A0E3 		ldr	r3, [fp, #-32]
 857 08b4 030680E2 		eor	r2, r3, #-2147483648
 858 08b8 0010A0E3 		ldr	r3, .L45+32
 859 08bc 0320A0E1 		str	r2, [r3, #8]	@ float
 860 08c0 0430A0E1 		.loc 1 277 0
 861 08c4 FEFFFFEB 		ldr	r2, .L45+32
 862 08c8 0030A0E1 		ldr	r3, [fp, #-36]	@ float
 863 08cc 0140A0E1 		str	r3, [r2, #12]	@ float
 864 08d0 0300A0E1 		.loc 1 278 0
 865 08d4 0410A0E1 		ldr	r3, [fp, #-40]
 866 08d8 FEFFFFEB 		eor	r2, r3, #-2147483648
 867 08dc 0030A0E1 		ldr	r3, .L45+32
 868 08e0 20300BE5 		str	r2, [r3, #16]	@ float
 273:lab.c         **** 
 274:lab.c         **** 	Winv[0] = 0;
 869              	32
 870 08e4 78239FE5 		ldr	r3, .L45+36	@ float
 871 08e8 78339FE5 		str	r3, [r2, #20]	@ float
 872 08ec 003082E5 		.loc 1 280 0
 275:lab.c         **** 	Winv[1] = twolkF;
 873              		r2, .L45+32
 874 08f0 6C239FE5 		ldr	r3, [fp, #-32]	@ float
 875 08f4 28301BE5 		str	r3, [r2, #24]	@ float
 876 08f8 043082E5 		.loc 1 281 0
 276:lab.c         **** 	Winv[2] = -fourkM;
 877              		r2, .L45+32
 878 08fc 20301BE5 		ldr	r3, [fp, #-36]	@ float
 879 0900 022123E2 		str	r3, [r2, #28]	@ float
 880 0904 58339FE5 		.loc 1 282 0
 881 0908 082083E5 		ldr	r2, .L45+32
 277:lab.c         **** 	Winv[3] = fourkF;
 882              	r3, .L45+36	@ float
 883 090c 50239FE5 		str	r3, [r2, #32]	@ float
 884 0910 24301BE5 		.loc 1 283 0
 885 0914 0C3082E5 		ldr	r3, [fp, #-40]
 278:lab.c         **** 	Winv[1*4+0] = -twolkF;
 886              		r2, r3, #-2147483648
 887 0918 28301BE5 		ldr	r3, .L45+32
 888 091c 022123E2 		str	r2, [r3, #36]	@ float
 889 0920 3C339FE5 		.loc 1 284 0
 890 0924 102083E5 		ldr	r3, [fp, #-32]
 279:lab.c         **** 	Winv[1*4+1] = 0;
 891              	r2, r3, #-2147483648
 892 0928 34239FE5 		ldr	r3, .L45+32
 893 092c 34339FE5 		str	r2, [r3, #40]	@ float
 894 0930 143082E5 		.loc 1 285 0
 280:lab.c         **** 	Winv[1*4+2] = fourkM;
 895              		r2, .L45+32
 896 0934 28239FE5 		ldr	r3, [fp, #-36]	@ float
 897 0938 20301BE5 		str	r3, [r2, #44]	@ float
 898 093c 183082E5 		.loc 1 286 0
 281:lab.c         **** 	Winv[1*4+3] = fourkF;
 899              		r2, .L45+32
 900 0940 1C239FE5 		ldr	r3, [fp, #-40]	@ float
 901 0944 24301BE5 		str	r3, [r2, #48]	@ float
 902 0948 1C3082E5 		.loc 1 287 0
 282:lab.c         **** 	Winv[2*4+0] = 0;
 903              		r2, .L45+32
 904 094c 10239FE5 		ldr	r3, .L45+36	@ float
 905 0950 10339FE5 		str	r3, [r2, #52]	@ float
 906 0954 203082E5 		.loc 1 288 0
 283:lab.c         **** 	Winv[2*4+1] = -twolkF;
 907              		r2, .L45+32
 908 0958 28301BE5 		ldr	r3, [fp, #-32]	@ float
 909 095c 022123E2 		str	r3, [r2, #56]	@ float
 910 0960 FC329FE5 		.loc 1 289 0
 911 0964 242083E5 		ldr	r2, .L45+32
 284:lab.c         **** 	Winv[2*4+2] = -fourkM;
 912              	r3, [fp, #-36]	@ float
 913 0968 20301BE5 		str	r3, [r2, #60]	@ float
 914 096c 022123E2 		.loc 1 291 0
 915 0970 EC329FE5 		ldr	r3, .L45+40
 916 0974 282083E5 		str	r3, [sp, #0]
 285:lab.c         **** 	Winv[2*4+3] = fourkF;
 917              	r3, .L45+44
 918 0978 E4229FE5 		str	r3, [sp, #4]
 919 097c 24301BE5 		mov	r0, #4
 920 0980 2C3082E5 		mov	r1, #4
 286:lab.c         **** 	Winv[3*4+0] = twolkF;
 921              		r2, #1
 922 0984 D8229FE5 		ldr	r3, .L45+32
 923 0988 28301BE5 		bl	matrix_multiply
 924 098c 303082E5 		.loc 1 294 0
 287:lab.c         **** 	Winv[3*4+1] = 0;
 925              		r3, #0
 926 0990 CC229FE5 		str	r3, [fp, #-28]
 927 0994 CC329FE5 		b	.L29
 928 0998 343082E5 	.L30:
 288:lab.c         **** 	Winv[3*4+2] = fourkM;
 929              	c 1 295 0
 930 099c C0229FE5 		ldr	r2, [fp, #-28]
 931 09a0 20301BE5 		ldr	r3, .L45+44
 932 09a4 383082E5 		ldr	r2, [r3, r2, asl #2]	@ float
 289:lab.c         **** 	Winv[3*4+3] = fourkF;
 933              		r3, .L45+48
 934 09a8 B4229FE5 		ldr	r3, [r3, #0]	@ float
 935 09ac 24301BE5 		mov	r0, r2
 936 09b0 3C3082E5 		mov	r1, r3
 290:lab.c         **** 
 291:lab.c         **** 	matrix_multiply(4,4,1,Winv,cnt_u,omega_cmd2);
 937              	__gtsf2
 938 09b4 B0329FE5 		mov	r3, r0
 939 09b8 00308DE5 		cmp	r3, #0
 940 09bc AC329FE5 		bgt	.L33
 941 09c0 04308DE5 		b	.L31
 942 09c4 0400A0E3 	.L33:
 943 09c8 0410A0E3 		.loc 1 296 0
 944 09cc 0120A0E3 		ldr	r1, [fp, #-28]
 945 09d0 8C329FE5 		ldr	r3, .L45+48
 946 09d4 FEFFFFEB 		ldr	r2, [r3, #0]	@ float
 292:lab.c         **** 
 293:lab.c         **** 	int i;
 294:lab.c         **** 	for (i=0; i<4; i++) {
 947              	L45+44
 948 09d8 0030A0E3 		str	r2, [r3, r1, asl #2]	@ float
 949 09dc 1C300BE5 		b	.L34
 950 09e0 710000EA 	.L31:
 951              		.loc 1 298 0
 295:lab.c         **** 		if (omega_cmd2[i] > MAXPHI2) {
 952              	r2, [fp, #-28]
 953 09e4 1C201BE5 		ldr	r3, .L45+44
 954 09e8 80329FE5 		ldr	r2, [r3, r2, asl #2]	@ float
 955 09ec 022193E7 		ldr	r3, .L45+52
 956 09f0 7C329FE5 		ldr	r3, [r3, #0]	@ float
 957 09f4 003093E5 		mov	r0, r2
 958 09f8 0200A0E1 		mov	r1, r3
 959 09fc 0310A0E1 		bl	__ltsf2
 960 0a00 FEFFFFEB 		mov	r3, r0
 961 0a04 0030A0E1 		cmp	r3, #0
 962 0a08 000053E3 		blt	.L36
 963 0a0c 000000CA 		b	.L34
 964 0a10 050000EA 	.L36:
 965              		.loc 1 299 0
 296:lab.c         **** 			omega_cmd2[i] = MAXPHI2;
 966              	#-28]
 967 0a14 1C101BE5 		ldr	r3, .L45+52
 968 0a18 54329FE5 		ldr	r2, [r3, #0]	@ float
 969 0a1c 002093E5 		ldr	r3, .L45+44
 970 0a20 48329FE5 		str	r2, [r3, r1, asl #2]	@ float
 971 0a24 012183E7 	.L34:
 972 0a28 100000EA 		.loc 1 301 0
 973              		ldr	r5, [fp, #-28]
 297:lab.c         **** 		}
 298:lab.c         **** 		else if (omega_cmd2[i] < MINPHI2) {
 974              	 [fp, #-28]
 975 0a2c 1C201BE5 		ldr	r3, .L45+44
 976 0a30 38329FE5 		ldr	r3, [r3, r2, asl #2]	@ float
 977 0a34 022193E7 		mov	r0, r3
 978 0a38 38329FE5 		bl	__extendsfdf2
 979 0a3c 003093E5 		mov	r3, r0
 980 0a40 0200A0E1 		mov	r4, r1
 981 0a44 0310A0E1 		mov	r0, r3
 982 0a48 FEFFFFEB 		mov	r1, r4
 983 0a4c 0030A0E1 		bl	sqrt
 984 0a50 000053E3 		mov	r3, r0
 985 0a54 000000BA 		mov	r4, r1
 986 0a58 040000EA 		mov	r0, r3
 987              		mov	r1, r4
 299:lab.c         **** 			omega_cmd2[i] = MINPHI2;
 988              	f2
 989 0a5c 1C101BE5 		mov	r2, r0
 990 0a60 10329FE5 		ldr	r3, .L45+56
 991 0a64 002093E5 		str	r2, [r3, r5, asl #2]	@ float
 992 0a68 00329FE5 		.loc 1 304 0
 993 0a6c 012183E7 		ldr	r5, [fp, #-28]
 994              		ldr	r2, [fp, #-28]
 300:lab.c         **** 		}
 301:lab.c         **** 		omega_cmd[i] = sqrt(omega_cmd2[i]);
 995              	, .L45+56
 996 0a70 1C501BE5 		ldr	r3, [r3, r2, asl #2]	@ float
 997 0a74 1C201BE5 		mov	r0, r3
 998 0a78 F0319FE5 		bl	__extendsfdf2
 999 0a7c 023193E7 		mov	r3, r0
 1000 0a80 0300A0E1 		mov	r4, r1
 1001 0a84 FEFFFFEB 		mov	r0, r3
 1002 0a88 0030A0E1 		mov	r1, r4
 1003 0a8c 0140A0E1 		adr	r2, .L45
 1004 0a90 0300A0E1 		ldmia	r2, {r2-r3}
 1005 0a94 0410A0E1 		bl	__muldf3
 1006 0a98 FEFFFFEB 		mov	r3, r0
 1007 0a9c 0030A0E1 		mov	r4, r1
 1008 0aa0 0140A0E1 		mov	r0, r3
 1009 0aa4 0300A0E1 		mov	r1, r4
 1010 0aa8 0410A0E1 		adr	r2, .L45+8
 1011 0aac FEFFFFEB 		ldmia	r2, {r2-r3}
 1012 0ab0 0020A0E1 		bl	__subdf3
 1013 0ab4 C0319FE5 		mov	r3, r0
 1014 0ab8 052183E7 		mov	r4, r1
 302:lab.c         **** 		// Translate Desired Rotor Speed into Motor Commands
 303:lab.c         **** 		// NOTE: THIS IS FOR THE PELICAN
 304:lab.c         **** 		cmd[i] = 0.238432*omega_cmd[i] - 25.872642;	// Verify
 1015              	 r4
 1016 0abc 1C501BE5 		bl	__truncdfsf2
 1017 0ac0 1C201BE5 		mov	r2, r0
 1018 0ac4 B0319FE5 		ldr	r3, .L45+60
 1019 0ac8 023193E7 		str	r2, [r3, r5, asl #2]	@ float
 1020 0acc 0300A0E1 		.loc 1 311 0
 1021 0ad0 FEFFFFEB 		ldr	r2, [fp, #-28]
 1022 0ad4 0030A0E1 		ldr	r3, .L45+60
 1023 0ad8 0140A0E1 		ldr	r3, [r3, r2, asl #2]	@ float
 1024 0adc 0300A0E1 		mov	r0, r3
 1025 0ae0 0410A0E1 		ldr	r1, .L45+64	@ float
 1026 0ae4 562F8FE2 		bl	__ltsf2
 1027 0ae8 0C0092E8 		mov	r3, r0
 1028 0aec FEFFFFEB 		cmp	r3, #0
 1029 0af0 0030A0E1 		blt	.L39
 1030 0af4 0140A0E1 		b	.L37
 1031 0af8 0300A0E1 	.L39:
 1032 0afc 0410A0E1 		.loc 1 312 0
 1033 0b00 512F8FE2 		ldr	r1, [fp, #-28]
 1034 0b04 0C0092E8 		ldr	r2, .L45+60
 1035 0b08 FEFFFFEB 		ldr	r3, .L45+64	@ float
 1036 0b0c 0030A0E1 		str	r3, [r2, r1, asl #2]	@ float
 1037 0b10 0140A0E1 		b	.L40
 1038 0b14 0300A0E1 	.L37:
 1039 0b18 0410A0E1 		.loc 1 314 0
 1040 0b1c FEFFFFEB 		ldr	r2, [fp, #-28]
 1041 0b20 0020A0E1 		ldr	r3, .L45+60
 1042 0b24 54319FE5 		ldr	r3, [r3, r2, asl #2]	@ float
 1043 0b28 052183E7 		mov	r0, r3
 305:lab.c         **** 
 306:lab.c         **** 		// Below is a safety measure. We want to make sure the motor
 307:lab.c         **** 		// commands are never 0 so that the motors will always keep
 308:lab.c         **** 		// spinning. Also makes sure that motor commands stay within range.
 309:lab.c         **** 		// NOTE: THIS SHOULD BE UNNECESSARY. I IMPLEMENTED THIS AS AN EXTRA
 310:lab.c         **** 		// SAFETY MEASURE
 311:lab.c         **** 		if (cmd[i] < 1.0) {
 1044              	__gtsf2
 1045 0b2c 1C201BE5 		mov	r3, r0
 1046 0b30 48319FE5 		cmp	r3, #0
 1047 0b34 023193E7 		bgt	.L42
 1048 0b38 0300A0E1 		b	.L40
 1049 0b3c 40119FE5 	.L42:
 1050 0b40 FEFFFFEB 		.loc 1 315 0
 1051 0b44 0030A0E1 		ldr	r1, [fp, #-28]
 1052 0b48 000053E3 		ldr	r2, .L45+60
 1053 0b4c 000000BA 		ldr	r3, .L45+68	@ float
 1054 0b50 040000EA 		str	r3, [r2, r1, asl #2]	@ float
 1055              	.L40:
 312:lab.c         **** 			cmd[i] = 1.0;
 1056              	0
 1057 0b54 1C101BE5 		ldr	r3, [fp, #-28]
 1058 0b58 20219FE5 		add	r3, r3, #1
 1059 0b5c 20319FE5 		str	r3, [fp, #-28]
 1060 0b60 013182E7 	.L29:
 1061 0b64 0D0000EA 		ldr	r3, [fp, #-28]
 1062              		cmp	r3, #3
 313:lab.c         **** 		}
 314:lab.c         **** 		else if (cmd[i] > 200.0) {
 1063              	30
 1064 0b68 1C201BE5 		.loc 1 321 0
 1065 0b6c 0C319FE5 		ldr	r3, .L45+60
 1066 0b70 023193E7 		ldr	r3, [r3, #0]	@ float
 1067 0b74 0300A0E1 		mov	r0, r3
 1068 0b78 08119FE5 		bl	__fixunssfsi
 1069 0b7c FEFFFFEB 		mov	r3, r0
 1070 0b80 0030A0E1 		and	r3, r3, #255
 1071 0b84 000053E3 		ldr	r2, .L45+72
 1072 0b88 000000CA 		strb	r3, [r2, #0]
 1073 0b8c 030000EA 		.loc 1 322 0
 1074              		ldr	r3, .L45+60
 315:lab.c         **** 			cmd[i] = 200.0;
 1075              	, #4]	@ float
 1076 0b90 1C101BE5 		mov	r0, r3
 1077 0b94 E4209FE5 		bl	__fixunssfsi
 1078 0b98 E8309FE5 		mov	r3, r0
 1079 0b9c 013182E7 		and	r3, r3, #255
 1080              		ldr	r2, .L45+72
 1081              		strb	r3, [r2, #3]
 1082 0ba0 1C301BE5 		.loc 1 323 0
 1083 0ba4 013083E2 		ldr	r3, .L45+60
 1084 0ba8 1C300BE5 		ldr	r3, [r3, #8]	@ float
 1085              		mov	r0, r3
 1086 0bac 1C301BE5 		bl	__fixunssfsi
 1087 0bb0 030053E3 		mov	r3, r0
 1088 0bb4 8AFFFFDA 		and	r3, r3, #255
 316:lab.c         **** 		}
 317:lab.c         **** 	}
 318:lab.c         **** 	/////////////////////////////////////////////////////////////////////////////////////////////
 319:lab.c         **** 
 320:lab.c         **** 	/////// Send Motor Commands ///////////
 321:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[0] = cmd[0];
 1089              	72
 1090 0bb8 C0309FE5 		strb	r3, [r2, #1]
 1091 0bbc 003093E5 		.loc 1 324 0
 1092 0bc0 0300A0E1 		ldr	r3, .L45+60
 1093 0bc4 FEFFFFEB 		ldr	r3, [r3, #12]	@ float
 1094 0bc8 0030A0E1 		mov	r0, r3
 1095 0bcc FF3003E2 		bl	__fixunssfsi
 1096 0bd0 B4209FE5 		mov	r3, r0
 1097 0bd4 0030C2E5 		and	r3, r3, #255
 322:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[3] = cmd[1];
 1098              	.L45+72
 1099 0bd8 A0309FE5 		strb	r3, [r2, #2]
 1100 0bdc 043093E5 		.loc 1 326 0
 1101 0be0 0300A0E1 		sub	sp, fp, #24
 1102 0be4 FEFFFFEB 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 1103 0be8 0030A0E1 		bx	lr
 1104 0bec FF3003E2 	.L46:
 1105 0bf0 94209FE5 		.align	2
 1106 0bf4 0330C2E5 	.L45:
 323:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[1] = cmd[2];
 1107              	70499056
 1108 0bf8 80309FE5 		.word	-1792478831
 1109 0bfc 083093E5 		.word	1077534565
 1110 0c00 0300A0E1 		.word	2001935796
 1111 0c04 FEFFFFEB 		.word	WO_SDK
 1112 0c08 0030A0E1 		.word	l
 1113 0c0c FF3003E2 		.word	kF
 1114 0c10 74209FE5 		.word	kM
 1115 0c14 0130C2E5 		.word	Winv
 324:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[2] = cmd[3];
 1116              		.word	cnt_u
 1117 0c18 60309FE5 		.word	omega_cmd2
 1118 0c1c 0C3093E5 		.word	MAXPHI2
 1119 0c20 0300A0E1 		.word	MINPHI2
 1120 0c24 FEFFFFEB 		.word	omega_cmd
 1121 0c28 0030A0E1 		.word	cmd
 1122 0c2c FF3003E2 		.word	1065353216
 1123 0c30 54209FE5 		.word	1128792064
 1124 0c34 0230C2E5 		.word	WO_Direct_Individual_Motor_Control
 325:lab.c         **** 	///////////////////////////////////////
 326:lab.c         **** }
 1125              	size	convert_input_to_motor_commands, .-convert_input_to_motor_commands
 1126 0c38 18D04BE2 		.comm	GPS_timeout,4,4
 1127 0c3c 70689DE8 		.comm	SYSTEM_initialized,1,1
 1128 0c40 1EFF2FE1 		.comm	imusensor,68,4
 1129              		.comm	mocap,44,4
 1130              		.comm	takeoff2,4,4
 1131              		.comm	initialize,4,4
 1132 0c44 F084CE3F 		.comm	velocityEstHolder,4,4
 1133 0c48 91F12895 		.comm	VelEstX,4,4
 1134 0c4c 65DF3940 		.comm	VelEstY,4,4
 1135 0c50 B41D5377 		.comm	VelEstZ,4,4
 1136 0c54 00000000 		.comm	previousXMeas,4,4
 1137 0c58 00000000 		.comm	previousYMeas,4,4
 1138 0c5c 00000000 		.comm	previousZMeas,4,4
 1139 0c60 00000000 		.comm	errorcum,12,4
 1140 0c64 00000000 		.comm	IntegralHolder,4,4
 1141 0c68 00000000 		.comm	u,16,4
 1142 0c6c 00000000 		.comm	goalposyaw,16,4
 1143 0c70 00000000 		.comm	cnt_u,16,4
 1144 0c74 00000000 		.comm	o_desired,12,4
 1145 0c78 00000000 		.comm	yaw_desired,4,4
 1146 0c7c 00000000 		.comm	xd,48,4
 1147 0c80 00000000 		.comm	Winv,64,4
 1148 0c84 0000803F 		.comm	omega_cmd2,16,4
 1149 0c88 00004843 		.comm	omega_cmd,16,4
 1150 0c8c 00000000 		.comm	cmd,16,4
 1151              		.section	.debug_frame,"",%progbits
 1152              	.Lframe0:
 1153              		.4byte	.LECIE0-.LSCIE0
 1154              	.LSCIE0:
 1155              		.4byte	0xffffffff
 1156              		.byte	0x1
 1157              		.ascii	"\000"
 1158              		.uleb128 0x1
 1159              		.sleb128 -4
 1160              		.byte	0xe
 1161              		.byte	0xc
 1162              		.uleb128 0xd
 1163              		.uleb128 0x0
 1164              		.align	2
 1165              	.LECIE0:
 1166              	.LSFDE0:
 1167              		.4byte	.LEFDE0-.LASFDE0
 1168              	.LASFDE0:
 1169              		.4byte	.Lframe0
 1170              		.4byte	.LFB2
 1171              		.4byte	.LFE2-.LFB2
 1172              		.byte	0x4
 1173              		.4byte	.LCFI0-.LFB2
 1174              		.byte	0xd
 1175              		.uleb128 0xc
 1176              		.byte	0x4
 1177              		.4byte	.LCFI1-.LCFI0
 1306              		.byte	0x5c
DEFINED SYMBOLS
                            *ABS*:00000000 lab.c
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:15     .data:00000000 mass
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:16     .data:00000000 $d
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:21     .data:00000004 kF
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:27     .data:00000008 kM
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:33     .data:0000000c l
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:39     .data:00000010 MAXPHI2
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:45     .data:00000014 MINPHI2
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:51     .data:00000018 K
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:104    .data:000000d8 g
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:110    .text:00000000 lab
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:117    .text:00000000 $a
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:192    .text:00000070 do_sensor_fusion
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:495    .text:00000428 lab3
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:749    .text:00000740 convert_input_to_motor_commands
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:156    .text:00000064 $d
                            *COM*:00000010 goalposyaw
                            *COM*:0000000c o_desired
                            *COM*:00000004 yaw_desired
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:166    .bss:00000000 LED1toggle
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:172    .bss:00000004 LED1count
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:178    .bss:00000008 numCMDs
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:198    .text:00000070 $a
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:463    .text:000003f8 $d
                            *COM*:0000002c mocap
                            *COM*:00000004 previousXMeas
                            *COM*:00000004 previousYMeas
                            *COM*:00000004 previousZMeas
                            *COM*:00000004 initialize
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:482    .bss:0000000c LED0timeCount
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:488    .bss:00000010 LED0toggle
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:501    .text:00000428 $a
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:727    .text:00000710 $d
                            *COM*:00000030 xd
                            *COM*:00000044 imusensor
                            *COM*:00000010 cnt_u
                            *COM*:00000010 u
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:755    .text:00000740 $a
C:\Users\stier2\AppData\Local\Temp/cc8Ucaaa.s:1132   .text:00000c44 $d
                            *COM*:00000040 Winv
                            *COM*:00000010 omega_cmd2
                            *COM*:00000010 omega_cmd
                            *COM*:00000010 cmd
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:00000004 takeoff2
                            *COM*:00000004 velocityEstHolder
                            *COM*:00000004 VelEstX
                            *COM*:00000004 VelEstY
                            *COM*:00000004 VelEstZ
                            *COM*:0000000c errorcum
                            *COM*:00000004 IntegralHolder

UNDEFINED SYMBOLS
__nesf2
__floatsidf
__adddf3
__fixdfsi
__subsf3
__extendsfdf2
__divdf3
__truncdfsf2
LED
__mulsf3
matrix_multiply
__muldf3
__gtsf2
__ltsf2
__subdf3
__fixunssfsi
sqrt
WO_SDK
WO_Direct_Individual_Motor_Control
